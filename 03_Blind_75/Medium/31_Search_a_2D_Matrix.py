"""
LeetCode 74. Search a 2D Matrix
Difficulty: Medium
Category: Binary Search

Write an efficient algorithm that searches for a value target in an m x n integer matrix. 
This matrix has the following properties:
- Integers in each row are sorted from left to right.
- The first integer of each row is greater than the last integer of the previous row.

Time Complexity: O(log(m * n))
Space Complexity: O(1)
"""

def searchMatrix(matrix, target):
    """
    Search for target in 2D matrix.
    
    Args:
        matrix: 2D sorted matrix
        target: Value to search for
        
    Returns:
        Boolean indicating if target exists in matrix
    """
    # TODO: Implement your solution here
    pass


# Test cases
def test_search_a_2d_matrix():
    """Test cases for Search a 2D Matrix"""
    test_cases = [
        # Basic test cases
        ([[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], 5, True),
        ([[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], 20, False),
        ([[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], 1, True),
        ([[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], 30, True),
        
        # Edge cases
        ([[1]], 1, True),
        ([[1]], 2, False),
        ([[1, 2]], 1, True),
        ([[1, 2]], 2, True),
        ([[1, 2]], 3, False),
        ([[1], [2]], 1, True),
        ([[1], [2]], 2, True),
        ([[1], [2]], 3, False),
        
        # LeetCode test cases
        ([[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], 5, True),
        ([[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], 20, False),
        
        # Additional test cases
        ([[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], 4, True),
        ([[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], 7, True),
        ([[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], 11, True),
        ([[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], 15, True),
        ([[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], 2, True),
        ([[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], 8, True),
        ([[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], 12, True),
        ([[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], 19, True),
        ([[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], 3, True),
        ([[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], 6, True),
        ([[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], 9, True),
        ([[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], 16, True),
        ([[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], 22, True),
        ([[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], 10, True),
        ([[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], 13, True),
        ([[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], 14, True),
        ([[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], 17, True),
        ([[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], 24, True),
        ([[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], 18, True),
        ([[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], 21, True),
        ([[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], 23, True),
        ([[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], 26, True),
        ([[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], 0, False),
        ([[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], 25, False),
        ([[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]], 31, False),
        
        # Single row
        ([[1, 2, 3, 4, 5]], 1, True),
        ([[1, 2, 3, 4, 5]], 3, True),
        ([[1, 2, 3, 4, 5]], 5, True),
        ([[1, 2, 3, 4, 5]], 0, False),
        ([[1, 2, 3, 4, 5]], 6, False),
        
        # Single column
        ([[1], [2], [3], [4], [5]], 1, True),
        ([[1], [2], [3], [4], [5]], 3, True),
        ([[1], [2], [3], [4], [5]], 5, True),
        ([[1], [2], [3], [4], [5]], 0, False),
        ([[1], [2], [3], [4], [5]], 6, False),
        
        # 2x2 matrix
        ([[1, 2], [3, 4]], 1, True),
        ([[1, 2], [3, 4]], 2, True),
        ([[1, 2], [3, 4]], 3, True),
        ([[1, 2], [3, 4]], 4, True),
        ([[1, 2], [3, 4]], 0, False),
        ([[1, 2], [3, 4]], 5, False),
        
        # 3x3 matrix
        ([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1, True),
        ([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5, True),
        ([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 9, True),
        ([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0, False),
        ([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 10, False),
        
        # 4x4 matrix
        ([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 1, True),
        ([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 8, True),
        ([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 16, True),
        ([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 0, False),
        ([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 17, False),
        
        # Large matrix
        ([[i + j for j in range(100)] for i in range(100)], 0, True),
        ([[i + j for j in range(100)] for i in range(100)], 50, True),
        ([[i + j for j in range(100)] for i in range(100)], 99, True),
        ([[i + j for j in range(100)] for i in range(100)], 100, True),
        ([[i + j for j in range(100)] for i in range(100)], 198, True),
        ([[i + j for j in range(100)] for i in range(100)], -1, False),
        ([[i + j for j in range(100)] for i in range(100)], 200, False),
        
        # Negative numbers
        ([[-1, 0, 1], [2, 3, 4], [5, 6, 7]], -1, True),
        ([[-1, 0, 1], [2, 3, 4], [5, 6, 7]], 0, True),
        ([[-1, 0, 1], [2, 3, 4], [5, 6, 7]], 1, True),
        ([[-1, 0, 1], [2, 3, 4], [5, 6, 7]], 7, True),
        ([[-1, 0, 1], [2, 3, 4], [5, 6, 7]], -2, False),
        ([[-1, 0, 1], [2, 3, 4], [5, 6, 7]], 8, False),
        
        # Mixed positive and negative
        ([[-5, -4, -3], [-2, -1, 0], [1, 2, 3]], -5, True),
        ([[-5, -4, -3], [-2, -1, 0], [1, 2, 3]], 0, True),
        ([[-5, -4, -3], [-2, -1, 0], [1, 2, 3]], 3, True),
        ([[-5, -4, -3], [-2, -1, 0], [1, 2, 3]], -6, False),
        ([[-5, -4, -3], [-2, -1, 0], [1, 2, 3]], 4, False),
        
        # Duplicates
        ([[1, 1, 1], [1, 1, 1], [1, 1, 1]], 1, True),
        ([[1, 1, 1], [1, 1, 1], [1, 1, 1]], 2, False),
        ([[1, 2, 2], [2, 2, 3], [3, 3, 4]], 2, True),
        ([[1, 2, 2], [2, 2, 3], [3, 3, 4]], 3, True),
        ([[1, 2, 2], [2, 2, 3], [3, 3, 4]], 4, True),
        ([[1, 2, 2], [2, 2, 3], [3, 3, 4]], 0, False),
        ([[1, 2, 2], [2, 2, 3], [3, 3, 4]], 5, False),
        
        # Edge cases with rotation
        ([[1, 2], [3, 4]], 1, True),
        ([[1, 2], [3, 4]], 2, True),
        ([[1, 2], [3, 4]], 3, True),
        ([[1, 2], [3, 4]], 4, True),
        ([[1, 2], [3, 4]], 0, False),
        ([[1, 2], [3, 4]], 5, False),
    ]
    
    print("Testing Search a 2D Matrix solution...")
    for i, (matrix, target, expected) in enumerate(test_cases):
        result = searchMatrix(matrix, target)
        if result == expected:
            print(f"✓ Test {i+1} passed: target={target}, result={result}")
        else:
            print(f"✗ Test {i+1} failed: target={target}")
            print(f"  Expected: {expected}, Got: {result}")
    
    print("\nAll tests completed!")


# Performance test
def test_performance():
    """Test solution performance with large input"""
    import time
    import random
    
    # Generate large matrix
    large_matrix = [[i + j for j in range(1000)] for i in range(1000)]
    target = random.randint(0, 1998)
    
    start_time = time.time()
    result = searchMatrix(large_matrix, target)
    end_time = time.time()
    
    print(f"\nPerformance Test:")
    print(f"Large matrix (1000x1000): {end_time - start_time:.4f} seconds")
    print(f"Target: {target}, Result: {result}")


if __name__ == "__main__":
    test_search_a_2d_matrix()
    test_performance()
